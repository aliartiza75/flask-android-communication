###################################################################################################
# Name: index.py
# Summary: File contains routes
# Author(s): Irtiza Ali
# LastUpdated: 01-04-2018
###################################################################################################
import os
import sys
import json
import copy
import subprocess
from flask import Flask, request, jsonify, redirect, Response

sys.path.insert(0, os.path.join(os.path.dirname(os.path.realpath(__file__))))
# dev defined Modules
import validations as validate
import configs as cfg
configs = copy.deepcopy(cfg.configs)

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = configs["UPLOAD_FOLDER"]

#  ENPOINTS START 
@app.route("/health-check", methods=["GET"])
def health_check():
    """
    Endpoint for the health check
    """
    msg = {
        "message": "API is up and running",
        "status": configs["STATUS_CODES"]["COMPLETED"]
    }
    return json.dumps(msg), configs["STATUS_CODES"]["COMPLETED"], {'ContentType':'application/json'}

@app.route("/file", methods=["POST"])
def getFile():
    """
    It will receive and process a file(.txt) and return the results 
    """
    # check if the POST request has a file part
    if 'messageFile' not in request.files:
        msg = {
            "message": "file is not sent",
            "status": configs["STATUS_CODES"]["INVALID_DATA"]
        }
        return json.dumps(msg), configs["STATUS_CODES"]["INVALID_DATA"], {'ContentType':'application/json'}

    msgFile = request.files['messageFile']
    
    # if user does not select file,
    if msgFile.filename == '':
        msg = {
            "message": "No file sent",
            "status": configs["STATUS_CODES"]["INVALID_DATA"]
        }
        
        return json.dumps(msg), configs["STATUS_CODES"]["INVALID_DATA"], {'ContentType':'application/json'}
    
    # validating file extention
    if (msgFile) and (validate.allowed_file(msgFile.filename)):
        # file is not saved
        if not validate.save_file(msgFile, app.config['UPLOAD_FOLDER']):
            msg = {
                "message": "Unable to save file",
                "status": configs["STATUS_CODES"]["INVALID_DATA"]
            }
            return json.dumps(msg), configs["STATUS_CODES"]["INVALID_DATA"], {'ContentType':'application/json'}
        """
        code to execute the python file
        """
        status_code = subprocess.call(["python", 'clientCode/pythoncode.py'])
        # if code executed successfully
        if status_code == 0:
            # read the result file generated by your code 
            try:
                a_count, na_count, result_data = validate.calculate_result('clientCode/result.txt')
            # if file is not found some others errors
            except Exception as e:
                result = {"result": str(e)}
                return json.dumps(result), 200, {'ContentType':'application/json'} 
            # if result file in not empty
            if result_data:
                result = {"result": result_data, 
                          "a_count": a_count,
                          "na_count": na_count}
                return json.dumps(result), 200, {'ContentType':'application/json'}
            # if result file not empty
            else:
                result = {"result": "No Result found"}
                return json.dumps(result), 200, {'ContentType':'application/json'}                

        # Code didn't executed successfully
        else:
            result = {"result": "Unable to process file"}
            return json.dumps(result), 200, {'ContentType':'application/json'}

        # USE THE CODE GIVEN BELOW TO REMOVE THE FILE
        # if not validate.remove_file(os.path.join(app.config['UPLOAD_FOLDER'], msgFile.filename)):
        #    msg = {
        #        "message": "Unable to complete process",
        #        "status": configs["STATUS_CODES "]["INVALID_DATA"]  # update the status
        #    }
        #    return json.dumps(msg)
    
    # In this result dictionary you can write you results
    result = {"result": "completed", "result2": "completed", "result3": 123, "result4": True}
    return json.dumps(result), 200, {'ContentType':'application/json'}
#  ENPOINTS END

